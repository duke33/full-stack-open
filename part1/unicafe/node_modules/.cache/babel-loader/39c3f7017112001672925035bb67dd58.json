{"ast":null,"code":"var _jsxFileName = \"/home/atom/Documents/FullStackOpen/part1/unicafe/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Button = ({\n  handleClick,\n  label\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleClick,\n    children: [\" \", label, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 10\n  }, this);\n};\n\n_c = Button;\n\nconst StatisticsLine = ({\n  text,\n  value\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = StatisticsLine;\n\nconst Statistics = ({\n  allVotes,\n  good,\n  neutral,\n  bad,\n  average,\n  positive\n}) => {\n  if (allVotes === 0) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" No feedback Given \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: [/*#__PURE__*/_jsxDEV(StatisticsLine, {\n        text: \"good\",\n        value: good\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatisticsLine, {\n        text: \"neutral\",\n        value: neutral\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatisticsLine, {\n        text: \"bad\",\n        value: bad\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatisticsLine, {\n        text: \"all\",\n        value: allVotes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatisticsLine, {\n        text: \"average\",\n        value: average\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatisticsLine, {\n        text: \"positive\",\n        value: positive\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\n_c3 = Statistics;\n\nconst App = () => {\n  _s();\n\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const allVotes = bad + good + neutral;\n  const average = (bad * -1 + good) / allVotes;\n  const positive = good / allVotes * 100;\n\n  const setValue = (vote, SpecificHandler) => {\n    const handler = () => {\n      SpecificHandler(vote + 1);\n    };\n\n    return handler;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Give Feedback \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      label: \"good\",\n      handleClick: setValue(good, setGood)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      label: \"neutral\",\n      handleClick: setValue(neutral, setNeutral)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      label: \"bad\",\n      handleClick: setValue(bad, setBad)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      good: good,\n      neutral: neutral,\n      bad: bad,\n      allVotes: allVotes,\n      average: average,\n      positive: positive\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n\n_c4 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"StatisticsLine\");\n$RefreshReg$(_c3, \"Statistics\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"sources":["/home/atom/Documents/FullStackOpen/part1/unicafe/src/App.js"],"names":["React","useState","Button","handleClick","label","StatisticsLine","text","value","Statistics","allVotes","good","neutral","bad","average","positive","App","setGood","setNeutral","setBad","setValue","vote","SpecificHandler","handler"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nconst Button = ({ handleClick, label }) => {\n  return <button onClick={handleClick}> {label} </button>;\n};\n\nconst StatisticsLine = ({ text, value }) => {\n  return (\n    <tr>\n      <td>{text}</td>\n      <td>{value}</td>\n    </tr>\n  );\n};\n\nconst Statistics = ({ allVotes, good, neutral, bad, average, positive }) => {\n  if (allVotes === 0) {\n    return <h1> No feedback Given </h1>;\n  }\n\n  return (\n    <table>\n      <tbody>\n        <StatisticsLine text=\"good\" value={good} />\n        <StatisticsLine text=\"neutral\" value={neutral} />\n        <StatisticsLine text=\"bad\" value={bad} />\n        <StatisticsLine text=\"all\" value={allVotes} />\n        <StatisticsLine text=\"average\" value={average} />\n        <StatisticsLine text=\"positive\" value={positive} />\n      </tbody>\n    </table>\n  );\n};\n\nconst App = () => {\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const allVotes = bad + good + neutral;\n  const average = (bad * -1 + good) / allVotes;\n  const positive = (good / allVotes) * 100;\n\n  const setValue = (vote, SpecificHandler) => {\n    const handler = () => {\n      SpecificHandler(vote + 1);\n    };\n    return handler;\n  };\n\n  return (\n    <div>\n      <h1> Give Feedback </h1>\n      <Button label=\"good\" handleClick={setValue(good, setGood)} />\n      <Button label=\"neutral\" handleClick={setValue(neutral, setNeutral)} />\n      <Button label=\"bad\" handleClick={setValue(bad, setBad)} />\n      <Statistics\n        good={good}\n        neutral={neutral}\n        bad={bad}\n        allVotes={allVotes}\n        average={average}\n        positive={positive}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}